#ifndef OSTAP_SVECTORWITHERROR_ICPP 
#define OSTAP_SVECTORWITHERROR_ICPP 1
// ============================================================================
// Include files
// ============================================================================
// STD & STL 
// ============================================================================
#include <sstream>
#include <cmath>
#include <algorithm>
#include <numeric>
// ============================================================================
// LHCbMath
// ============================================================================
#include "Ostap/SVectorWithError.h"
#include "Ostap/MatrixUtils.h"
// ============================================================================
/** @file Ostap/SVectorWithError.icpp
 *  The implementation file for class Ostap::Math::SVectorWithError
 *  @author Vanya BELYAEV Ivan.Belyaev@itep.ru
 *  @date 2009-06-13
 */
// ============================================================================
template <unsigned int N, class SCALAR>
inline double 
Ostap::Math::SVectorWithError<N,SCALAR>::chi2 
( const Ostap::Math::SVectorWithError<N,SCALAR>& right ) const
{
  Covariance s_cov2 ( this->cov2() ) ;
  s_cov2 += right.cov2() ;
  /// use Manuel's inverter:
  const bool ok = s_cov2.InvertChol() ;
  if  ( !ok ) { return -1 ; }                                        // RETURN  
  /// calculate chi2 
  return ROOT::Math::Similarity ( this->value() - right.value() , s_cov2 ) ;
}
// ============================================================================
template <unsigned int N, class SCALAR>
inline double 
Ostap::Math::SVectorWithError<N,SCALAR>::chi2 
( const ROOT::Math::SVector<SCALAR,N>& right ) const
{
  Covariance s_cov2 ( this->cov2() ) ;
  /// use Manuel's inverter:
  const bool ok = s_cov2.InvertChol() ;
  if  ( !ok ) { return -1 ; }                                        // RETURN  
  /// calculate chi2 
  return ROOT::Math::Similarity ( this->value() - right , s_cov2 ) ;
}
// ============================================================================
template <unsigned int N, class SCALAR>
template <class B>
inline double 
Ostap::Math::SVectorWithError<N,SCALAR>::chi2 
( const ROOT::Math::VecExpr<B,SCALAR,N>& right ) const
{
  Covariance s_cov2 ( this->cov2() ) ;
  /// use Manuel's inverter:
  const bool ok = s_cov2.InvertChol() ;
  if  ( !ok ) { return -1 ; }                                        // RETURN  
  /// calculate chi2 
  return ROOT::Math::Similarity ( this->value() - right , s_cov2 ) ;
}
// ============================================================================
template <unsigned int N, class SCALAR>
inline
Ostap::Math::SVectorWithError<N,SCALAR> 
Ostap::Math::SVectorWithError<N,SCALAR>::__add__  
( const Ostap::Math::SVectorWithError<N,SCALAR>& right  ) const 
{ return ( (*this) + right ) ; }
// ============================================================================
template <unsigned int N, class SCALAR>
inline
Ostap::Math::SVectorWithError<N,SCALAR> 
Ostap::Math::SVectorWithError<N,SCALAR>::__sub__  
( const Ostap::Math::SVectorWithError<N,SCALAR>& right  ) const 
{ return ( (*this) - right ) ; }
// ============================================================================
template <unsigned int N, class SCALAR>
inline
Ostap::Math::SVectorWithError<N,SCALAR> 
Ostap::Math::SVectorWithError<N,SCALAR>::__add__  
( const ROOT::Math::SVector<SCALAR,N>& right  ) const 
{ return ( (*this) + right ) ; }
// ============================================================================
template <unsigned int N, class SCALAR>
inline
Ostap::Math::SVectorWithError<N,SCALAR> 
Ostap::Math::SVectorWithError<N,SCALAR>::__sub__  
( const ROOT::Math::SVector<SCALAR,N>& right  ) const 
{ return ( (*this) - right ) ; }
// ============================================================================
template <unsigned int N, class SCALAR>
inline
Ostap::Math::SVectorWithError<N,SCALAR> 
Ostap::Math::SVectorWithError<N,SCALAR>::__radd__  
( const ROOT::Math::SVector<SCALAR,N>& right  ) const 
{ return ( (*this) + right ) ; }
// ============================================================================
template <unsigned int N, class SCALAR>
inline
Ostap::Math::SVectorWithError<N,SCALAR> 
Ostap::Math::SVectorWithError<N,SCALAR>::__rsub__  
( const ROOT::Math::SVector<SCALAR,N>& right  ) const 
{ return ( right - (*this) ) ; }
// ============================================================================
template <unsigned int N, class SCALAR>
template <unsigned int K, typename R> 
Ostap::Math::SVectorWithError<K,SCALAR>
Ostap::Math::SVectorWithError<N,SCALAR>::__rmul__ 
( const ROOT::Math::SMatrix<SCALAR,K,N,R>& M ) const 
{
  return SVectorWithError<K,SCALAR> ( M * m_value , m_cov2.Similarity ( M ) ) ;
}  
// ============================================================================
// conversion to string
// ============================================================================
template <unsigned int N, class SCALAR>
inline std::string  
Ostap::Math::SVectorWithError<N,SCALAR>::toString   () const // conversion to string
{
  std::ostringstream os ;
  this->fillStream ( os ) ;
  return os.str() ;
}
// ============================================================================
// printout 
// ============================================================================
template <unsigned int N, class SCALAR>
inline std::ostream& 
Ostap::Math::SVectorWithError<N,SCALAR>::fillStream ( std::ostream& s ) const 
{
  s << "( " ;
  for ( unsigned int i = 0 ; i < N ; ++i ) 
  {
    if ( 0 != i ) { s << " , " ; }
    s << this->value()(i) << " +- " ;
    const double d = m_cov2(i,i) ;
    s <<  ( 0 <= d ? std::sqrt ( d ) : -std::sqrt(-d) ) ;
  }
  return s << " )" ;
} 
// ============================================================================
/*  get the correlation coefficient between "i" and "j"
 *  for invalid setup , return large negative value 
 *  @param i the first index 
 *  @param j the second index 
 *  @return correlation coefficient 
 */
// ============================================================================
template <unsigned int N, class SCALAR>
inline SCALAR Ostap::Math::SVectorWithError<N,SCALAR>::corr 
( unsigned int i , 
  unsigned int j ) const 
{
  static const SCALAR s_bad = -10000 ;
  //
  const SCALAR sii = this->cov2( i , i ) ;
  const SCALAR sjj = this->cov2( j , j ) ;
  //
  if ( 0 >= sii || 0 >= sjj ) { return s_bad ; }                      // RETURN  
  //
  return this->cov2( i , j ) / std::sqrt ( sii * sjj ) ;              // RETURN 
}
// ============================================================================
/*  get the full correlation matrix 
 *  @return false for invalid setup 
 */
// ============================================================================
template <unsigned int N, class SCALAR>
inline bool Ostap::Math::SVectorWithError<N,SCALAR>::corr 
( typename Ostap::Math::SVectorWithError<N,SCALAR>::Covariance& corrm ) const
{
  bool OK = true ;
  //
  for ( unsigned int i = 0 ; i < N && OK ; ++i ) 
  {
    corrm ( i , i ) = 1 ;
    //
    const SCALAR sii = this->cov2 ( i , i ) ;
    if   ( 0 >= sii ) { OK = false ; break ; }                       // BREAK
    //
    for ( unsigned int j =  i + 1 ; j < N && OK ; ++j ) 
    {
      const SCALAR sjj = this->cov2 ( j , j ) ;
      if ( 0 >= sjj ) { OK = false ; break ; }                        // BREAK
      //
      corrm ( i , j ) = this->cov2 (i , j ) / std::sqrt ( sii * sjj ) ;   
      //
    }
  }
  //
  if ( !OK ) { Ostap::Math::setToUnit ( corrm , -1. ) ; }
  //
  return OK ;
}
// ============================================================================
// calculate the weighted average for two vectors 
// ============================================================================
template <unsigned int N, class SCALAR>
inline 
Ostap::Math::SVectorWithError<N,SCALAR>
Ostap::Math::SVectorWithError<N,SCALAR>::mean
( const Ostap::Math::SVectorWithError<N,SCALAR>& right ) const
{
  int ifail1 = 0 ;  
  int ifail2 = 0 ;  
  const Covariance ic1 ( this->cov2().InverseChol ( ifail1 ) ) ;
  const Covariance ic2 ( right.cov2().InverseChol ( ifail2 ) );
  // calculate the covariance matrix 
  Covariance        c  ( ic1 + ic2 ) ;
  if ( 0 != ifail1 || 0 != ifail2 || !c.InvertChol() ) 
  {
    std::fill   ( c.begin() , c.end  () , -1.0 ) ;
    return Self ( c ) ;
  }
  // calculate the weighted average
  return Self ( c * ( ic1 * this->value() + ic2 * right.value() ) , c ) ;
}
// ============================================================================
/*  Get asymmetric Kullback-Leibler divergency for two objects 
 *  @see https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence
 *  @see Ostap::Math::kullback_leibler 
 */
// ============================================================================
template <unsigned int N, class SCALAR>
inline
double 
Ostap::Math::SVectorWithError<N,SCALAR>::asymmetric_kullback_leibler 
( const Ostap::Math::SVectorWithError<N,SCALAR>& right ) const
{
  return Ostap::Math::asymmetric_kullback_leibler
    ( this->value () , this->cov2 () , right.value () , right.cov2 () ) ; 
}
// ============================================================================
/*  Get symmetrized Kullback-Leibler divergency, 
 *  aka Jeffrey's divernecy, for two objects 
 *  @see https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence
 *  @see Ostap::Math::kullback_leibler 
 */
// ============================================================================
template <unsigned int N, class SCALAR>
inline
double 
Ostap::Math::SVectorWithError<N,SCALAR>::kullback_leibler 
( const Ostap::Math::SVectorWithError<N,SCALAR>& right ) const
{
  return Ostap::Math::kullback_leibler 
    ( this->value () , this->cov2 () , right.value () , right.cov2 () ) ; 
}
// ============================================================================
/*  get Mahalanobis distance 
 *  https://en.wikipedia.org/wiki/Mahalanobis_distance  
 *  @return Mahalanobis distance (-1 in case of error)
 */
// ============================================================================
template <unsigned int N, class SCALAR>
inline
double 
Ostap::Math::SVectorWithError<N,SCALAR>::mahalanobis  
( const Ostap::Math::SVectorWithError<N,SCALAR>& right ) const
{
  const double c2 = this->chi2 ( right ) ;
  return 0 <= c2 ? std::sqrt ( c2 ) : c2 ;
}
// ============================================================================
/*  get Mahalanobis distance 
 *  https://en.wikipedia.org/wiki/Mahalanobis_distance  
 *  @return Mahalanobis distance (-1 in case of error)
 */
// ============================================================================
template <unsigned int N, class SCALAR>
inline
double 
Ostap::Math::SVectorWithError<N,SCALAR>::mahalanobis  
( const ROOT::Math::SVector<SCALAR,N>& right ) const
{
  const double c2 = this->chi2 ( right ) ;
  return 0 <= c2 ? std::sqrt ( c2 ) : c2 ;
}
// ============================================================================
/*  make unnormalized weighted sum, accounting the uncertainties  
 *  \f[ r  = \sum_i v_i w_i \f] 
 *  @param values  INPUT vector of values 
 *  @param weights INPUT vector of weigths 
 *  @return unnormalized weighted sum 
 */
// ============================================================================
template <unsigned int N, typename SCALAR> 
inline Ostap::Math::ValueWithError 
Ostap::Math::dot 
( const Ostap::Math::SVectorWithError<N,SCALAR>& values  , 
  const Ostap::Math::SVectorWithError<N,SCALAR>& weights ) 
{
  /// central value 
  const double value = Ostap::Math::dot ( values.value () , weights.value ()  ) ;
  /// derivatives 
  const ROOT::Math::SVector<SCALAR,N>& dRdV = weights ;
  /// derivatives 
  const ROOT::Math::SVector<SCALAR,N>& dRdW = values  ;
  /// covariace 
  const double cov2  = 
    values .cov2().Similarity ( dRdV ) + 
    weights.cov2().Similarity ( dRdW ) ;
  /// final result 
  return Ostap::Math::ValueWithError ( value , cov2 ) ;
}
// ============================================================================
/*  make unnormalized weighted sum, accounting the uncertainties  
 *  \f[ r  = \sum_i v_i w_i \f] 
 *  @param values  INPUT vector of values 
 *  @param weights INPUT vector of weigths 
 *  @return unnormalized weighted sum 
 */
// ============================================================================
template <unsigned int N, typename SCALAR> 
inline Ostap::Math::ValueWithError 
Ostap::Math::dot
( const Ostap::Math::SVectorWithError<N,SCALAR>& values  , 
  const ROOT::Math::SVector<SCALAR,N>&           weights ) 
{
  /// central value 
  const double value = Ostap::Math::dot ( values.value () , weights ) ;
  /// derivatives 
  const ROOT::Math::SVector<SCALAR,N>& dRdV = weights ;
  /// covarinace 
  const double cov2  = values.cov2().Similarity ( dRdV ) ;
  /// final result 
  return Ostap::Math::ValueWithError ( value , cov2 ) ;
}
// ============================================================================
/*  make unnormalized weighted sum, accounting the uncertainties  
 *  \f[ r  = \sum_i v_i w_i \f] 
 *  @param values  INPUT vector of values 
 *  @param weights INPUT vector of weigths 
 *  @return unnormalized weighted sum 
 */
// ============================================================================
template <unsigned int N, typename SCALAR> 
inline Ostap::Math::ValueWithError 
Ostap::Math::dot
( const ROOT::Math::SVector<SCALAR,N>&           values  , 
  const Ostap::Math::SVectorWithError<N,SCALAR>& weights ) 
{ return dot ( weights , values ) ; }
// ============================================================================
/*  make normalized weighted sum, accounting the uncertainties  
 *  \f[ r  = \frac{ \sum_i v_i w_i } { \sum_i w_i }\f] 
 *  @param values  INPUT vector of values 
 *  @param weights INPUT vector of weigths 
 *  @return normalized weighted sum 
 */
// ============================================================================
template <unsigned int N, typename SCALAR> 
inline Ostap::Math::ValueWithError 
Ostap::Math::weighted_sum
( const Ostap::Math::SVectorWithError<N,SCALAR>& values  , 
  const Ostap::Math::SVectorWithError<N,SCALAR>& weights ) 
{
  /// total weight 
  const double sumw  = std::accumulate ( weights.value ().begin () , 
                                         weights.value ().end   () , 0.0 ) ;
  /// central value 
  const double value = Ostap::Math::weighted_sum ( values.value () , weights.value () ) ;
  /// derivatives 
  const ROOT::Math::SVector<SCALAR,N> dRdV {   weights.value ()           / sumw } ;
  /// derivatives 
  const ROOT::Math::SVector<SCALAR,N> dRdW { ( values .value () - value ) / sumw } ;
  /// covarinace 
  const double cov2  = 
    ROOT::Math::Similarity ( values .cov2() , dRdV ) + 
    ROOT::Math::Similarity ( weights.cov2() , dRdW ) ;
  /// final result 
  return Ostap::Math::ValueWithError ( value , cov2 ) ;    
}
// ============================================================================
/*  make normalized weighted sum, accounting the uncertainties  
 *  \f[ r  = \frac{ \sum_i v_i w_i } { \sum_i w_i }\f] 
 *  @param values  INPUT vector of values 
 *  @param weights INPUT vector of weigths 
 *  @return normalized weighted sum 
 */
// ============================================================================
template <unsigned int N, typename SCALAR> 
inline Ostap::Math::ValueWithError 
Ostap::Math::weighted_sum
( const Ostap::Math::SVectorWithError<N,SCALAR>& values  , 
  const ROOT::Math::SVector<SCALAR,N>&           weights ) 
{
  /// total weight 
  const double sumw  = std::accumulate ( weights.begin () , 
                                         weights.end   () , 0.0 ) ;
  /// central value 
  const double value = Ostap::Math::weighted_sum ( values.value() , weights ) ;
  /// derivatives 
  const ROOT::Math::SVector<SCALAR,N> dRdV {   weights / sumw } ;
  /// covarinace 
  const double cov2  = ROOT::Math::Similarity ( values .cov2() , dRdV ) ;
  /// final result 
  return Ostap::Math::ValueWithError ( value , cov2 ) ;    
}
// ========================================================================
/*  make normalized weighted sum, accounting the uncertainties  
 *  \f[ r  = \frac{ \sum_i v_i w_i } { \sum_i w_i }\f] 
 *  @param values  INPUT vector of values 
 *  @param weights INPUT vector of weigths 
 *  @return normalized weighted sum 
 */
// ========================================================================
template <unsigned int N, typename SCALAR> 
inline Ostap::Math::ValueWithError 
Ostap::Math::weighted_sum
( const ROOT::Math::SVector<SCALAR,N>&           values  , 
  const Ostap::Math::SVectorWithError<N,SCALAR>& weights )
{
  /// total weight 
  const double sumw  = std::accumulate ( weights.value().begin () , 
                                         weights.value().end   () , 0.0 ) ;
  /// central value 
  const double value = Ostap::Math::weighted_sum ( values , weights.value () ) ;
  /// derivatives 
  const ROOT::Math::SVector<SCALAR,N> dRdW { ( values - value ) / sumw } ;
  /// covarinace 
  const double cov2  = ROOT::Math::Similarity ( weights.cov2() , dRdW ) ;
  /// final result 
  return Ostap::Math::ValueWithError ( value , cov2 ) ;    
}
// ===========================================================================


// ============================================================================
/*  get the (unnornalized) weighted sum with set of weights 
 *  \f[ r = \sum_i v_i w_i \f]
 *  @param weigths (INPUT) vector of weights 
 */ 
// ============================================================================
template <unsigned int N, typename SCALAR> 
inline Ostap::Math::ValueWithError 
Ostap::Math::SVectorWithError<N,SCALAR>::dot
( const Ostap::Math::SVectorWithError<N,SCALAR>& weights ) const 
{ return Ostap::Math::dot ( *this , weights ) ; }
// ============================================================================
/*  get the (unnornalized) weighted sum with set of weights 
 *  \f[ r = \sum_i v_i w_i \f]
 *  @param weigths (INPUT) vector of weights 
 */ 
// ============================================================================
template <unsigned int N, typename SCALAR> 
inline Ostap::Math::ValueWithError 
Ostap::Math::SVectorWithError<N,SCALAR>::dot
( const Ostap::Math::SVectorWithError<N,SCALAR>::Value& weights ) const 
{ return Ostap::Math::dot ( *this , weights ) ; }
// ============================================================================
/*  get the (normalized) weighted sum with set of weights 
 *  \f[ r = \frac{\sum_i v_i w_i}{ \sum_i w_i } \f]
 *  @param weigths (INPUT) vector of weights 
 */ 
// ============================================================================
template <unsigned int N, typename SCALAR> 
inline Ostap::Math::ValueWithError 
Ostap::Math::SVectorWithError<N,SCALAR>::weighted_sum
( const Ostap::Math::SVectorWithError<N,SCALAR>& weights ) const 
{ return Ostap::Math::weighted_sum ( *this , weights ) ; }
// ============================================================================
/*  get the (normalized) weighted sum with set of weights 
 *  \f[ r = \frac{\sum_i v_i w_i}{ \sum_i w_i } \f]
 *  @param weigths (INPUT) vector of weights 
 */ 
// ============================================================================
template <unsigned int N, typename SCALAR> 
inline Ostap::Math::ValueWithError 
Ostap::Math::SVectorWithError<N,SCALAR>::weighted_sum
( const Ostap::Math::SVectorWithError<N,SCALAR>::Value& weights ) const 
{ return Ostap::Math::weighted_sum ( *this , weights ) ; }
// ============================================================================




// ============================================================================
//                                                                     The END 
// ============================================================================
#endif // OSTAP_SVECTORWITHERROR_ICPP 
// ============================================================================
