// ============================================================================
#ifndef OSTAP_BERNULLI_H 
#define OSTAP_BERNULLI_H 1
// ============================================================================
// ============================================================================
// ============================================================================
/** @file Ostap/Bernulli.h
 *  Bernulli numbers and polynomials 
 *  @author Vanya BELYAEV Ivan.Belyaev@itep.ru
 *  @date 2015-03-26
 */  
// ============================================================================
namespace Ostap
{
  // ==========================================================================
  namespace Math 
  {
    // ========================================================================
    /** Get Bernulli number 
     *  - \f$ B_0 = 1 \f$ 
     *  - \f$ B_1 = -\frac{1}{2} \f$ 
     *  - \f$ B_{2k+1) = 0 \f$ 
     */
    double bernulli ( const unsigned short k ) ;
    // =========================================================================
    /** @class Bernulli
     *  evaluate the Bernulli polynomials
     *  @author Vanya BELYAEV Ivan.Belyaev@itep.ru
     *  @date 2025-04-05
     */
    class Bernulli
    {
    public:
      // ======================================================================
      /// constructor from the order 
      Bernulli ( const unsigned short N = 0 ) ;
      // ======================================================================
    public:
      // ======================================================================
      /// evaluate the polynomial
      inline double operator() ( const double x ) const { return evaluate ( x ) ; }
      /// evaluate the polynomial
      double evaluate ( const double x ) const ;
      // ======================================================================
    public:
      // ======================================================================
      unsigned short degree () const { return m_N ; }
      double         xmin   () const { return 0   ; }
      double         xmax   () const { return 1   ; }
      // ======================================================================
    public:
      // ======================================================================
      /// derivative 
      double derivative
      ( const double x ) const ;
      /// integral
      double integral
      ( const double xmin ,
        const double xmax ) const ;
      // ======================================================================
    private:
      // ======================================================================
      unsigned short       m_N { 0 } ;
      // ======================================================================
    } ;
    // ========================================================================
  } //                                         The end of namespace Ostap::Math 
  // ==========================================================================
} //                                                 The end of namespace Ostap 
// ============================================================================
//                                                                      The END 
// ============================================================================
#endif // OSTAP_BERNULLI_H
// ============================================================================
