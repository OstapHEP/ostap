// ============================================================================
#ifndef OSTAP_QUANTILE_H 
#define OSTAP_QUANTILE_H 1
// ============================================================================
// STD&STL
// ============================================================================
#include <utility>
#include <algorithm>
#include <array>
// ============================================================================
// Ostap
// =============================================================================
#include "Ostap/Statistic.h"
// =============================================================================
namespace Ostap
{
  // ==========================================================================
  namespace  Math
  {
    // ========================================================================
    /** @class Qantile 
     *  P2 algorithm for (approximate quantile estimamtion)
     *  @see https://aakinshin.net/posts/p2-quantile-estimator-intro/
     */
    class  Quantile : public Ostap::Math::Statistic
    {
    public :
      // =======================================================================
      /// #of events 
      typedef unsigned long long  size_type ; 
      // =======================================================================      
    public :
      // =======================================================================
      /** constructor from  p
       *  @parameter p (INPUT) p: \f$ 0 \le p \le 1 \f$  
       *  - mesian : p = 0.5
       */  
      Quantile ( const double p  = 0.5 ) ;
      // ======================================================================
    public :
      // ======================================================================
      /// add one more measurable, update quantiles    
      Quantile& add ( const double v ) ;
      // =====================================================================
    public: // Ostap::Math::Statistic
      // =====================================================================
      // Generic counter interface
      void update ( const double value ) override { add  ( value ) ; }
      void reset  ()                     override { m_N = 0 ; } ; 
      // ======================================================================
    public:
      // ======================================================================
      /// sample size 
      inline size_type N    () const { return m_N  ; }
      /// sample size 
      inline size_type size () const { return N () ; }
      // get the quantile value
      double value () const { return m_q[2] ; } 
      // ======================================================================
    private:
      // ======================================================================
      /// quantile 
      double                    m_p   { 0.5 } ; // quantile 
      /// sample size 
      size_type                 m_N   { 0   } ; // sample size
      //
      std::array<double,5>      m_q   {     } ;
      std::array<std::size_t,5> m_n   {     } ;
      std::array<double,5>      m_np  {     } ;
      std::array<double,5>      m_dnp {     } ;
      // =======================================================================
    };
    // ========================================================================
  } //                                         The end od namesapce Ostap::Math
  // ==========================================================================
} //                                                The  end of namespace Ostap 
// ============================================================================
//                                                                      The END 
// ============================================================================
#endif // OSTAP_P2QUANTILE_H
// ============================================================================
